{"version":3,"file":"index.js","sources":["../src/defaults.ts","../src/getMentionDeserialize.ts","../src/moveSelectionByOffset.ts","../src/options/getMentionInputType.ts","../src/options/getMentionInputPluginOptions.ts","../src/queries/findMentionInput.ts","../src/queries/isNodeMentionInput.ts","../src/queries/isSelectionInMentionInput.ts","../src/transforms/removeMentionInput.ts","../src/withMention.ts","../src/createMentionPlugin.ts","../src/getMentionOnSelectItem.ts"],"sourcesContent":["export const ELEMENT_MENTION_INPUT = 'mention_input';\nexport const ELEMENT_MENTION = 'mention';\nexport const COMBOBOX_TRIGGER_MENTION = '@';\n","import { getNodeDeserializer } from '@udecode/plate-common';\nimport {\n  Deserialize,\n  getPlatePluginOptions,\n  getSlateClass,\n} from '@udecode/plate-core';\nimport { ELEMENT_MENTION } from './defaults';\n\nexport const getMentionDeserialize = (\n  pluginKey = ELEMENT_MENTION\n): Deserialize => (editor) => {\n  const options = getPlatePluginOptions(editor, pluginKey);\n\n  return {\n    element: getNodeDeserializer({\n      type: options.type,\n      getNode: (el) => ({\n        type: options.type,\n        value: el.getAttribute('data-slate-value'),\n      }),\n      rules: [{ className: getSlateClass(options.type) }],\n      ...options.deserialize,\n    }),\n  };\n};\n","import { KeyboardEvent } from 'react';\nimport { SPEditor } from '@udecode/plate-core';\nimport { HandlerReturnType } from '@udecode/plate-core/src';\nimport { Range, Transforms } from 'slate';\n\nexport const moveSelectionByOffset = (\n  editor: SPEditor,\n  { query = () => true }: { query: (editor: SPEditor) => boolean }\n) => (event: KeyboardEvent): HandlerReturnType => {\n  const { selection } = editor;\n  if (!selection || Range.isExpanded(selection) || !query(editor)) {\n    return false;\n  }\n\n  if (event.key === 'ArrowLeft') {\n    event.preventDefault();\n    Transforms.move(editor, { unit: 'offset', reverse: true });\n    return true;\n  }\n\n  if (event.key === 'ArrowRight') {\n    event.preventDefault();\n    Transforms.move(editor, { unit: 'offset' });\n    return true;\n  }\n};\n","import { getPlatePluginType, SPEditor } from '@udecode/plate-core';\nimport { ELEMENT_MENTION_INPUT } from '../defaults';\n\nexport const getMentionInputType = <T extends SPEditor = SPEditor>(\n  editor: T\n): string => getPlatePluginType(editor, ELEMENT_MENTION_INPUT);\n","import {\n  getPlatePluginOptions,\n  PlatePluginOptions,\n  SPEditor,\n} from '@udecode/plate-core';\nimport { ELEMENT_MENTION_INPUT } from '../defaults';\nimport { MentionPluginOptions } from '../types';\n\nexport const getMentionInputPluginOptions = <T extends SPEditor = SPEditor>(\n  editor: T\n): PlatePluginOptions<MentionPluginOptions> =>\n  getPlatePluginOptions<MentionPluginOptions>(editor, ELEMENT_MENTION_INPUT);\n","import { findNode, FindNodeOptions } from '@udecode/plate-common';\nimport { SPEditor } from '@udecode/plate-core';\nimport { getMentionInputType } from '../options';\n\nexport const findMentionInput = (\n  editor: SPEditor,\n  options?: Omit<FindNodeOptions, 'match'>\n) =>\n  findNode(editor, {\n    ...options,\n    match: { type: getMentionInputType(editor) },\n  });\n","import { SPEditor, TDescendant, TElement } from '@udecode/plate-core';\nimport { getMentionInputType } from '../options';\n\nexport const isNodeMentionInput = (\n  editor: SPEditor,\n  node: TDescendant\n): node is TElement<{ trigger: string }> =>\n  node.type === getMentionInputType(editor);\n","import { SPEditor } from '@udecode/plate-core';\nimport { findMentionInput } from './findMentionInput';\n\nexport const isSelectionInMentionInput = (editor: SPEditor) =>\n  findMentionInput(editor) !== undefined;\n","import { SPEditor, TDescendant } from '@udecode/plate-core';\nimport { Editor, Node, Path, Transforms } from 'slate';\n\nexport const removeMentionInput = (editor: SPEditor, path: Path) =>\n  Editor.withoutNormalizing(editor, () => {\n    const { trigger } = Node.get(editor, path) as TDescendant;\n\n    Transforms.insertText(editor, trigger, {\n      at: { path: [...path, 0], offset: 0 },\n    });\n    Transforms.unwrapNodes(editor, {\n      at: path,\n    });\n  });\n","import { comboboxStore } from '@udecode/plate-combobox';\nimport { insertNodes } from '@udecode/plate-common';\nimport { SPEditor, WithOverride } from '@udecode/plate-core';\nimport { Editor, Node, Range, Transforms } from 'slate';\nimport { HistoryEditor } from 'slate-history';\nimport { ReactEditor } from 'slate-react';\nimport { removeMentionInput } from './transforms/removeMentionInput';\nimport { getMentionInputType } from './options';\nimport {\n  findMentionInput,\n  isNodeMentionInput,\n  isSelectionInMentionInput,\n} from './queries';\n\nexport const withMention = ({\n  id,\n  trigger,\n}: {\n  id: string;\n  trigger: string;\n}): WithOverride<ReactEditor & SPEditor> => (editor) => {\n  const { apply, insertText, deleteBackward } = editor;\n\n  editor.deleteBackward = (unit) => {\n    const currentMentionInput = findMentionInput(editor);\n    if (currentMentionInput && Node.string(currentMentionInput[0]) === '') {\n      return removeMentionInput(editor, currentMentionInput[1]);\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.insertText = (text) => {\n    if (isSelectionInMentionInput(editor)) {\n      return Transforms.insertText(editor, text);\n    }\n\n    if (!editor.selection || text !== trigger) {\n      return insertText(text);\n    }\n\n    // Make sure a mention input is created at the beginning of line or after a whitespace\n    const previousCharLocation = Editor.before(editor, editor.selection);\n    if (previousCharLocation) {\n      const previousChar = Editor.string(\n        editor,\n        Editor.range(editor, editor.selection, previousCharLocation)\n      );\n      if (previousChar !== '' && previousChar !== ' ') {\n        return insertText(text);\n      }\n    }\n\n    insertNodes(editor, {\n      type: getMentionInputType(editor),\n      children: [{ text: '' }],\n      trigger,\n    });\n  };\n\n  editor.apply = (operation) => {\n    if (HistoryEditor.isHistoryEditor(editor) && findMentionInput(editor)) {\n      HistoryEditor.withoutSaving(editor, () => apply(operation));\n    } else {\n      apply(operation);\n    }\n\n    if (operation.type === 'insert_text' || operation.type === 'remove_text') {\n      const currentMentionInput = findMentionInput(editor);\n      if (currentMentionInput) {\n        comboboxStore.set.text(Node.string(currentMentionInput[0]));\n      }\n    } else if (operation.type === 'set_selection') {\n      const previousMentionInputPath = Range.isRange(operation.properties)\n        ? findMentionInput(editor, { at: operation.properties })?.[1]\n        : undefined;\n\n      const currentMentionInputPath = Range.isRange(operation.newProperties)\n        ? findMentionInput(editor, { at: operation.newProperties })?.[1]\n        : undefined;\n\n      if (previousMentionInputPath && !currentMentionInputPath) {\n        removeMentionInput(editor, previousMentionInputPath);\n      }\n\n      if (currentMentionInputPath) {\n        comboboxStore.set.targetRange(editor.selection);\n      }\n    } else if (\n      operation.type === 'insert_node' &&\n      isNodeMentionInput(editor, operation.node)\n    ) {\n      if (operation.node.trigger !== trigger) {\n        return;\n      }\n\n      comboboxStore.set.open({\n        activeId: id,\n        text: '',\n        targetRange: editor.selection,\n      });\n    } else if (\n      operation.type === 'remove_node' &&\n      isNodeMentionInput(editor, operation.node)\n    ) {\n      if (operation.node.trigger !== trigger) {\n        return;\n      }\n\n      comboboxStore.set.reset();\n    }\n  };\n\n  return editor;\n};\n","import {\n  getPlatePluginTypes,\n  getRenderElement,\n  PlatePlugin,\n} from '@udecode/plate-core';\nimport {\n  COMBOBOX_TRIGGER_MENTION,\n  ELEMENT_MENTION,\n  ELEMENT_MENTION_INPUT,\n} from './defaults';\nimport { getMentionDeserialize } from './getMentionDeserialize';\nimport { moveSelectionByOffset } from './moveSelectionByOffset';\nimport { isSelectionInMentionInput } from './queries';\nimport { MentionPluginOptions } from './types';\nimport { withMention } from './withMention';\n\n/**\n * Enables support for autocompleting @mentions.\n */\nexport const createMentionPlugin = ({\n  pluginKey = ELEMENT_MENTION,\n  trigger = COMBOBOX_TRIGGER_MENTION,\n}: MentionPluginOptions = {}): PlatePlugin => ({\n  pluginKeys: [pluginKey, ELEMENT_MENTION_INPUT],\n  renderElement: getRenderElement([pluginKey, ELEMENT_MENTION_INPUT]),\n  deserialize: getMentionDeserialize(pluginKey),\n  inlineTypes: getPlatePluginTypes([pluginKey, ELEMENT_MENTION_INPUT]),\n  voidTypes: getPlatePluginTypes(pluginKey),\n  withOverrides: withMention({ id: pluginKey, trigger }),\n  onKeyDown: (editor) =>\n    moveSelectionByOffset(editor, { query: isSelectionInMentionInput }),\n});\n","import {\n  ComboboxItemData,\n  ComboboxOnSelectItem,\n  comboboxStore,\n} from '@udecode/plate-combobox';\nimport { getBlockAbove, insertNodes } from '@udecode/plate-common';\nimport {\n  getPlatePluginType,\n  PlatePluginKey,\n  TElement,\n} from '@udecode/plate-core';\nimport { Editor, Transforms } from 'slate';\nimport { ELEMENT_MENTION, ELEMENT_MENTION_INPUT } from './defaults';\n// FIXME: Cannot figure out the TS for this to work with insertNodes\n// import { MentionNodeData } from './types';\n\nexport interface CreateMentionNode {\n  (item: ComboboxItemData): Record<string, unknown>;\n}\n\nexport const getMentionOnSelectItem = ({\n  pluginKey = ELEMENT_MENTION,\n  createMentionNode = (item) => ({ value: item.text }),\n  insertSpaceAfterMention,\n}: {\n  createMentionNode?: CreateMentionNode;\n  insertSpaceAfterMention?: boolean;\n} & PlatePluginKey = {}): ComboboxOnSelectItem => (editor, item) => {\n  const targetRange = comboboxStore.get.targetRange();\n  if (!targetRange) return;\n\n  const type = getPlatePluginType(editor, pluginKey);\n  const pathAbove = getBlockAbove(editor)?.[1];\n  const isBlockEnd =\n    editor.selection &&\n    pathAbove &&\n    Editor.isEnd(editor, editor.selection.anchor, pathAbove);\n\n  Editor.withoutNormalizing(editor, () => {\n    // insert a space to fix the bug\n    if (isBlockEnd) {\n      Transforms.insertText(editor, ' ');\n    }\n\n    // select the text and insert the element\n    Transforms.select(editor, targetRange);\n\n    Transforms.removeNodes(editor, {\n      // TODO: replace any\n      match: (node: any) => node.type === ELEMENT_MENTION_INPUT,\n    });\n    insertNodes<TElement>(editor, {\n      type,\n      children: [{ text: '' }],\n      ...createMentionNode(item),\n    });\n    // move the selection after the element\n    Transforms.move(editor);\n\n    // delete the inserted space\n    if (isBlockEnd && !insertSpaceAfterMention) {\n      Transforms.delete(editor);\n    }\n  });\n  return comboboxStore.set.reset();\n};\n"],"names":["ELEMENT_MENTION_INPUT","ELEMENT_MENTION","COMBOBOX_TRIGGER_MENTION","getMentionDeserialize","pluginKey","editor","options","getPlatePluginOptions","element","getNodeDeserializer","type","getNode","el","value","getAttribute","rules","className","getSlateClass","deserialize","moveSelectionByOffset","query","event","selection","Range","isExpanded","key","preventDefault","Transforms","move","unit","reverse","getMentionInputType","getPlatePluginType","getMentionInputPluginOptions","findMentionInput","findNode","match","isNodeMentionInput","node","isSelectionInMentionInput","undefined","removeMentionInput","path","Editor","withoutNormalizing","trigger","Node","get","insertText","at","offset","unwrapNodes","withMention","id","apply","deleteBackward","currentMentionInput","string","text","previousCharLocation","before","previousChar","range","insertNodes","children","operation","HistoryEditor","isHistoryEditor","withoutSaving","comboboxStore","set","previousMentionInputPath","isRange","properties","currentMentionInputPath","newProperties","targetRange","open","activeId","reset","createMentionPlugin","pluginKeys","renderElement","getRenderElement","inlineTypes","getPlatePluginTypes","voidTypes","withOverrides","onKeyDown","getMentionOnSelectItem","createMentionNode","item","insertSpaceAfterMention","pathAbove","getBlockAbove","isBlockEnd","isEnd","anchor","select","removeNodes","delete"],"mappings":";;;;;;;;;;MAAaA,qBAAqB,GAAG;MACxBC,eAAe,GAAG;MAClBC,wBAAwB,GAAG;;MCM3BC,qBAAqB,GAAG,CACnCC,SAAS,GAAGH,eADuB,KAElBI,MAAD,IAAY;AAC5B,QAAMC,OAAO,GAAGC,+BAAqB,CAACF,MAAD,EAASD,SAAT,CAArC;AAEA,SAAO;AACLI,IAAAA,OAAO,EAAEC,+BAAmB,CAAC;AAC3BC,MAAAA,IAAI,EAAEJ,OAAO,CAACI,IADa;AAE3BC,MAAAA,OAAO,EAAGC,EAAD,KAAS;AAChBF,QAAAA,IAAI,EAAEJ,OAAO,CAACI,IADE;AAEhBG,QAAAA,KAAK,EAAED,EAAE,CAACE,YAAH,CAAgB,kBAAhB;AAFS,OAAT,CAFkB;AAM3BC,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,SAAS,EAAEC,uBAAa,CAACX,OAAO,CAACI,IAAT;AAA1B,OAAD,CANoB;AAO3B,SAAGJ,OAAO,CAACY;AAPgB,KAAD;AADvB,GAAP;AAWD;;MCnBYC,qBAAqB,GAAG,CACnCd,MADmC,EAEnC;AAAEe,EAAAA,KAAK,GAAG,MAAM;AAAhB,CAFmC,KAG/BC,KAAD,IAA6C;AAChD,QAAM;AAAEC,IAAAA;AAAF,MAAgBjB,MAAtB;;AACA,MAAI,CAACiB,SAAD,IAAcC,WAAK,CAACC,UAAN,CAAiBF,SAAjB,CAAd,IAA6C,CAACF,KAAK,CAACf,MAAD,CAAvD,EAAiE;AAC/D,WAAO,KAAP;AACD;;AAED,MAAIgB,KAAK,CAACI,GAAN,KAAc,WAAlB,EAA+B;AAC7BJ,IAAAA,KAAK,CAACK,cAAN;AACAC,IAAAA,gBAAU,CAACC,IAAX,CAAgBvB,MAAhB,EAAwB;AAAEwB,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAE;AAA3B,KAAxB;AACA,WAAO,IAAP;AACD;;AAED,MAAIT,KAAK,CAACI,GAAN,KAAc,YAAlB,EAAgC;AAC9BJ,IAAAA,KAAK,CAACK,cAAN;AACAC,IAAAA,gBAAU,CAACC,IAAX,CAAgBvB,MAAhB,EAAwB;AAAEwB,MAAAA,IAAI,EAAE;AAAR,KAAxB;AACA,WAAO,IAAP;AACD;AACF;;MCtBYE,mBAAmB,GAC9B1B,MADiC,IAEtB2B,4BAAkB,CAAC3B,MAAD,EAASL,qBAAT;;MCGlBiC,4BAA4B,GACvC5B,MAD0C,IAG1CE,+BAAqB,CAAuBF,MAAvB,EAA+BL,qBAA/B;;MCPVkC,gBAAgB,GAAG,CAC9B7B,MAD8B,EAE9BC,OAF8B,KAI9B6B,oBAAQ,CAAC9B,MAAD,EAAS,EACf,GAAGC,OADY;AAEf8B,EAAAA,KAAK,EAAE;AAAE1B,IAAAA,IAAI,EAAEqB,mBAAmB,CAAC1B,MAAD;AAA3B;AAFQ,CAAT;;MCLGgC,kBAAkB,GAAG,CAChChC,MADgC,EAEhCiC,IAFgC,KAIhCA,IAAI,CAAC5B,IAAL,KAAcqB,mBAAmB,CAAC1B,MAAD;;MCJtBkC,yBAAyB,GAAIlC,MAAD,IACvC6B,gBAAgB,CAAC7B,MAAD,CAAhB,KAA6BmC;;ACDxB,MAAMC,kBAAkB,GAAG,CAACpC,MAAD,EAAmBqC,IAAnB,KAChCC,YAAM,CAACC,kBAAP,CAA0BvC,MAA1B,EAAkC,MAAM;AACtC,QAAM;AAAEwC,IAAAA;AAAF,MAAcC,UAAI,CAACC,GAAL,CAAS1C,MAAT,EAAiBqC,IAAjB,CAApB;AAEAf,EAAAA,gBAAU,CAACqB,UAAX,CAAsB3C,MAAtB,EAA8BwC,OAA9B,EAAuC;AACrCI,IAAAA,EAAE,EAAE;AAAEP,MAAAA,IAAI,EAAE,CAAC,GAAGA,IAAJ,EAAU,CAAV,CAAR;AAAsBQ,MAAAA,MAAM,EAAE;AAA9B;AADiC,GAAvC;AAGAvB,EAAAA,gBAAU,CAACwB,WAAX,CAAuB9C,MAAvB,EAA+B;AAC7B4C,IAAAA,EAAE,EAAEP;AADyB,GAA/B;AAGD,CATD,CADK;;ACWA,MAAMU,WAAW,GAAG,CAAC;AAC1BC,EAAAA,EAD0B;AAE1BR,EAAAA;AAF0B,CAAD,KAMkBxC,MAAD,IAAY;AACtD,QAAM;AAAEiD,IAAAA,KAAF;AAASN,IAAAA,UAAT;AAAqBO,IAAAA;AAArB,MAAwClD,MAA9C;;AAEAA,EAAAA,MAAM,CAACkD,cAAP,GAAyB1B,IAAD,IAAU;AAChC,UAAM2B,mBAAmB,GAAGtB,gBAAgB,CAAC7B,MAAD,CAA5C;;AACA,QAAImD,mBAAmB,IAAIV,UAAI,CAACW,MAAL,CAAYD,mBAAmB,CAAC,CAAD,CAA/B,MAAwC,EAAnE,EAAuE;AACrE,aAAOf,kBAAkB,CAACpC,MAAD,EAASmD,mBAAmB,CAAC,CAAD,CAA5B,CAAzB;AACD;;AAEDD,IAAAA,cAAc,CAAC1B,IAAD,CAAd;AACD,GAPD;;AASAxB,EAAAA,MAAM,CAAC2C,UAAP,GAAqBU,IAAD,IAAU;AAC5B,QAAInB,yBAAyB,CAAClC,MAAD,CAA7B,EAAuC;AACrC,aAAOsB,gBAAU,CAACqB,UAAX,CAAsB3C,MAAtB,EAA8BqD,IAA9B,CAAP;AACD;;AAED,QAAI,CAACrD,MAAM,CAACiB,SAAR,IAAqBoC,IAAI,KAAKb,OAAlC,EAA2C;AACzC,aAAOG,UAAU,CAACU,IAAD,CAAjB;AACD,KAP2B;;;AAU5B,UAAMC,oBAAoB,GAAGhB,YAAM,CAACiB,MAAP,CAAcvD,MAAd,EAAsBA,MAAM,CAACiB,SAA7B,CAA7B;;AACA,QAAIqC,oBAAJ,EAA0B;AACxB,YAAME,YAAY,GAAGlB,YAAM,CAACc,MAAP,CACnBpD,MADmB,EAEnBsC,YAAM,CAACmB,KAAP,CAAazD,MAAb,EAAqBA,MAAM,CAACiB,SAA5B,EAAuCqC,oBAAvC,CAFmB,CAArB;;AAIA,UAAIE,YAAY,KAAK,EAAjB,IAAuBA,YAAY,KAAK,GAA5C,EAAiD;AAC/C,eAAOb,UAAU,CAACU,IAAD,CAAjB;AACD;AACF;;AAEDK,IAAAA,uBAAW,CAAC1D,MAAD,EAAS;AAClBK,MAAAA,IAAI,EAAEqB,mBAAmB,CAAC1B,MAAD,CADP;AAElB2D,MAAAA,QAAQ,EAAE,CAAC;AAAEN,QAAAA,IAAI,EAAE;AAAR,OAAD,CAFQ;AAGlBb,MAAAA;AAHkB,KAAT,CAAX;AAKD,GA1BD;;AA4BAxC,EAAAA,MAAM,CAACiD,KAAP,GAAgBW,SAAD,IAAe;AAC5B,QAAIC,0BAAa,CAACC,eAAd,CAA8B9D,MAA9B,KAAyC6B,gBAAgB,CAAC7B,MAAD,CAA7D,EAAuE;AACrE6D,MAAAA,0BAAa,CAACE,aAAd,CAA4B/D,MAA5B,EAAoC,MAAMiD,KAAK,CAACW,SAAD,CAA/C;AACD,KAFD,MAEO;AACLX,MAAAA,KAAK,CAACW,SAAD,CAAL;AACD;;AAED,QAAIA,SAAS,CAACvD,IAAV,KAAmB,aAAnB,IAAoCuD,SAAS,CAACvD,IAAV,KAAmB,aAA3D,EAA0E;AACxE,YAAM8C,mBAAmB,GAAGtB,gBAAgB,CAAC7B,MAAD,CAA5C;;AACA,UAAImD,mBAAJ,EAAyB;AACvBa,QAAAA,2BAAa,CAACC,GAAd,CAAkBZ,IAAlB,CAAuBZ,UAAI,CAACW,MAAL,CAAYD,mBAAmB,CAAC,CAAD,CAA/B,CAAvB;AACD;AACF,KALD,MAKO,IAAIS,SAAS,CAACvD,IAAV,KAAmB,eAAvB,EAAwC;AAAA;;AAC7C,YAAM6D,wBAAwB,GAAGhD,WAAK,CAACiD,OAAN,CAAcP,SAAS,CAACQ,UAAxB,yBAC7BvC,gBAAgB,CAAC7B,MAAD,EAAS;AAAE4C,QAAAA,EAAE,EAAEgB,SAAS,CAACQ;AAAhB,OAAT,CADa,sDAC7B,kBAAyD,CAAzD,CAD6B,GAE7BjC,SAFJ;AAIA,YAAMkC,uBAAuB,GAAGnD,WAAK,CAACiD,OAAN,CAAcP,SAAS,CAACU,aAAxB,0BAC5BzC,gBAAgB,CAAC7B,MAAD,EAAS;AAAE4C,QAAAA,EAAE,EAAEgB,SAAS,CAACU;AAAhB,OAAT,CADY,uDAC5B,mBAA4D,CAA5D,CAD4B,GAE5BnC,SAFJ;;AAIA,UAAI+B,wBAAwB,IAAI,CAACG,uBAAjC,EAA0D;AACxDjC,QAAAA,kBAAkB,CAACpC,MAAD,EAASkE,wBAAT,CAAlB;AACD;;AAED,UAAIG,uBAAJ,EAA6B;AAC3BL,QAAAA,2BAAa,CAACC,GAAd,CAAkBM,WAAlB,CAA8BvE,MAAM,CAACiB,SAArC;AACD;AACF,KAhBM,MAgBA,IACL2C,SAAS,CAACvD,IAAV,KAAmB,aAAnB,IACA2B,kBAAkB,CAAChC,MAAD,EAAS4D,SAAS,CAAC3B,IAAnB,CAFb,EAGL;AACA,UAAI2B,SAAS,CAAC3B,IAAV,CAAeO,OAAf,KAA2BA,OAA/B,EAAwC;AACtC;AACD;;AAEDwB,MAAAA,2BAAa,CAACC,GAAd,CAAkBO,IAAlB,CAAuB;AACrBC,QAAAA,QAAQ,EAAEzB,EADW;AAErBK,QAAAA,IAAI,EAAE,EAFe;AAGrBkB,QAAAA,WAAW,EAAEvE,MAAM,CAACiB;AAHC,OAAvB;AAKD,KAbM,MAaA,IACL2C,SAAS,CAACvD,IAAV,KAAmB,aAAnB,IACA2B,kBAAkB,CAAChC,MAAD,EAAS4D,SAAS,CAAC3B,IAAnB,CAFb,EAGL;AACA,UAAI2B,SAAS,CAAC3B,IAAV,CAAeO,OAAf,KAA2BA,OAA/B,EAAwC;AACtC;AACD;;AAEDwB,MAAAA,2BAAa,CAACC,GAAd,CAAkBS,KAAlB;AACD;AACF,GAnDD;;AAqDA,SAAO1E,MAAP;AACD,CApGM;;ACEP;AACA;AACA;;MACa2E,mBAAmB,GAAG,CAAC;AAClC5E,EAAAA,SAAS,GAAGH,eADsB;AAElC4C,EAAAA,OAAO,GAAG3C;AAFwB,IAGV,EAHS,MAGY;AAC7C+E,EAAAA,UAAU,EAAE,CAAC7E,SAAD,EAAYJ,qBAAZ,CADiC;AAE7CkF,EAAAA,aAAa,EAAEC,0BAAgB,CAAC,CAAC/E,SAAD,EAAYJ,qBAAZ,CAAD,CAFc;AAG7CkB,EAAAA,WAAW,EAAEf,qBAAqB,CAACC,SAAD,CAHW;AAI7CgF,EAAAA,WAAW,EAAEC,6BAAmB,CAAC,CAACjF,SAAD,EAAYJ,qBAAZ,CAAD,CAJa;AAK7CsF,EAAAA,SAAS,EAAED,6BAAmB,CAACjF,SAAD,CALe;AAM7CmF,EAAAA,aAAa,EAAEnC,WAAW,CAAC;AAAEC,IAAAA,EAAE,EAAEjD,SAAN;AAAiByC,IAAAA;AAAjB,GAAD,CANmB;AAO7C2C,EAAAA,SAAS,EAAGnF,MAAD,IACTc,qBAAqB,CAACd,MAAD,EAAS;AAAEe,IAAAA,KAAK,EAAEmB;AAAT,GAAT;AARsB,CAHZ;;ACLnC;;MAMakD,sBAAsB,GAAG,CAAC;AACrCrF,EAAAA,SAAS,GAAGH,eADyB;AAErCyF,EAAAA,iBAAiB,GAAIC,IAAD,KAAW;AAAE9E,IAAAA,KAAK,EAAE8E,IAAI,CAACjC;AAAd,GAAX,CAFiB;AAGrCkC,EAAAA;AAHqC,IAOlB,EAPiB,KAOY,CAACvF,MAAD,EAASsF,IAAT,KAAkB;AAAA;;AAClE,QAAMf,WAAW,GAAGP,2BAAa,CAACtB,GAAd,CAAkB6B,WAAlB,EAApB;AACA,MAAI,CAACA,WAAL,EAAkB;AAElB,QAAMlE,IAAI,GAAGsB,4BAAkB,CAAC3B,MAAD,EAASD,SAAT,CAA/B;AACA,QAAMyF,SAAS,qBAAGC,yBAAa,CAACzF,MAAD,CAAhB,mDAAG,eAAwB,CAAxB,CAAlB;AACA,QAAM0F,UAAU,GACd1F,MAAM,CAACiB,SAAP,IACAuE,SADA,IAEAlD,YAAM,CAACqD,KAAP,CAAa3F,MAAb,EAAqBA,MAAM,CAACiB,SAAP,CAAiB2E,MAAtC,EAA8CJ,SAA9C,CAHF;AAKAlD,EAAAA,YAAM,CAACC,kBAAP,CAA0BvC,MAA1B,EAAkC,MAAM;AACtC;AACA,QAAI0F,UAAJ,EAAgB;AACdpE,MAAAA,gBAAU,CAACqB,UAAX,CAAsB3C,MAAtB,EAA8B,GAA9B;AACD,KAJqC;;;AAOtCsB,IAAAA,gBAAU,CAACuE,MAAX,CAAkB7F,MAAlB,EAA0BuE,WAA1B;AAEAjD,IAAAA,gBAAU,CAACwE,WAAX,CAAuB9F,MAAvB,EAA+B;AAC7B;AACA+B,MAAAA,KAAK,EAAGE,IAAD,IAAeA,IAAI,CAAC5B,IAAL,KAAcV;AAFP,KAA/B;AAIA+D,IAAAA,uBAAW,CAAW1D,MAAX,EAAmB;AAC5BK,MAAAA,IAD4B;AAE5BsD,MAAAA,QAAQ,EAAE,CAAC;AAAEN,QAAAA,IAAI,EAAE;AAAR,OAAD,CAFkB;AAG5B,SAAGgC,iBAAiB,CAACC,IAAD;AAHQ,KAAnB,CAAX,CAbsC;;AAmBtChE,IAAAA,gBAAU,CAACC,IAAX,CAAgBvB,MAAhB,EAnBsC;;AAsBtC,QAAI0F,UAAU,IAAI,CAACH,uBAAnB,EAA4C;AAC1CjE,MAAAA,gBAAU,CAACyE,MAAX,CAAkB/F,MAAlB;AACD;AACF,GAzBD;AA0BA,SAAOgE,2BAAa,CAACC,GAAd,CAAkBS,KAAlB,EAAP;AACD;;;;;;;;;;;;;;;"}