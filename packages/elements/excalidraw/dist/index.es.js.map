{"version":3,"file":"index.es.js","sources":["../src/defaults.ts","../src/getExcalidrawDeserialize.ts","../src/createExcalidrawPlugin.ts","../src/components/ExcalidrawElement/ExcalidrawElement.styles.ts","../src/components/ExcalidrawElement/ExcalidrawElement.tsx","../src/transforms/insertExcalidraw.ts"],"sourcesContent":["export const ELEMENT_EXCALIDRAW = 'excalidraw';\n","import { getNodeDeserializer } from '@udecode/plate-common';\nimport {\n  Deserialize,\n  getPlatePluginOptions,\n  getSlateClass,\n} from '@udecode/plate-core';\nimport { ELEMENT_EXCALIDRAW } from './defaults';\n\nexport const getExcalidrawDeserialize = (\n  pluginKey = ELEMENT_EXCALIDRAW\n): Deserialize => (editor) => {\n  const options = getPlatePluginOptions(editor, pluginKey);\n\n  return {\n    element: getNodeDeserializer({\n      type: options.type,\n      getNode: () => {\n        // let url = el.getAttribute('src');\n        // if (url) {\n        //  [url] = url.split('?');\n\n        return {\n          type: options.type,\n          //  url,\n        };\n        // }\n      },\n      rules: [{ className: getSlateClass(options.type) }],\n      ...options.deserialize,\n    }),\n  };\n};\n","import {\n  getPlatePluginTypes,\n  getRenderElement,\n  PlatePlugin,\n} from '@udecode/plate-core';\nimport { ELEMENT_EXCALIDRAW } from './defaults';\nimport { getExcalidrawDeserialize } from './getExcalidrawDeserialize';\n\n/**\n * Enables support for Excalidraw drawing tool within a Slate document\n */\nexport const createExcalidrawPlugin = ({\n  pluginKey = ELEMENT_EXCALIDRAW,\n}: {\n  pluginKey?: string;\n} = {}): PlatePlugin => ({\n  pluginKeys: pluginKey,\n  renderElement: getRenderElement(pluginKey),\n  deserialize: getExcalidrawDeserialize(pluginKey),\n  voidTypes: getPlatePluginTypes(pluginKey),\n});\n","import { createStyles } from '@udecode/plate-styled-components';\nimport tw from 'twin.macro';\nimport { ExcalidrawElementProps } from './ExcalidrawElement.types';\n\nexport const getExcalidrawElementStyles = (props: ExcalidrawElementProps) =>\n  createStyles(\n    { prefixClassNames: 'ExcalidrawElement', ...props },\n    {\n      excalidrawWrapper: tw`height[600px]`,\n    }\n  );\n","import React, { useEffect, useRef, useState } from 'react';\nimport { ExcalidrawImperativeAPI } from '@excalidraw/excalidraw-next/types/types';\nimport { TExcalidrawProps } from '../../types';\nimport { getExcalidrawElementStyles } from './ExcalidrawElement.styles';\nimport { ExcalidrawElementProps } from './ExcalidrawElement.types';\n\nexport const ExcalidrawElement = (props: ExcalidrawElementProps) => {\n  const {\n    attributes,\n    children,\n    nodeProps,\n    element,\n    styles: _styles,\n    classNames,\n    prefixClassNames,\n    scrollToContent = true,\n    libraryItems = [],\n    excalidrawProps: _excalidrawProps,\n    ...rootProps\n  } = props;\n\n  const [Excalidraw, setExcalidraw] = useState<any>(null);\n  useEffect(() => {\n    import('@excalidraw/excalidraw-next').then((comp) =>\n      setExcalidraw(comp.default)\n    );\n  });\n\n  const styles = getExcalidrawElementStyles(props);\n  const _excalidrawRef = useRef<ExcalidrawImperativeAPI>(null);\n\n  // const editor = useEditorRef();\n\n  const excalidrawProps: TExcalidrawProps = {\n    excalidrawRef: _excalidrawRef,\n    initialData: {\n      elements: element.data?.elements,\n      appState: element.data?.state,\n      scrollToContent,\n      libraryItems,\n    },\n    autoFocus: false,\n    // onChange: (elements: readonly ExcalidrawElementType[], state: AppState) => {\n    // const path = ReactEditor.findPath(editor, element);\n\n    // FIXME: setNodes triggers render loop as onChange is triggered on rerender\n    // in the meantime, the prop can be used to save the data outside slate\n    // setNodes(editor, { data: { elements, state } }, { at: path });\n    // },\n    ..._excalidrawProps,\n  };\n\n  return (\n    <div {...attributes} {...rootProps}>\n      <div contentEditable={false}>\n        <div\n          css={styles.excalidrawWrapper?.css}\n          className={styles.excalidrawWrapper?.className}\n        >\n          {Excalidraw && (\n            <Excalidraw {...nodeProps} {...(excalidrawProps as any)} />\n          )}\n        </div>\n      </div>\n      {children}\n    </div>\n  );\n};\n\n// const ActionButtons = () => (\n//   <div className=\"button-wrapper\">\n//     <button className=\"update-scene\" onClick={updateScene} type=\"button\">\n//       Update Scene\n//     </button>\n//     <button\n//       className=\"reset-scene\"\n//       onClick={() => {\n//         excalidrawRef?.current!.resetScene();\n//       }}\n//       type=\"button\"\n//     >\n//       Reset Scene\n//     </button>\n//     <label>\n//       <input\n//         type=\"checkbox\"\n//         checked={viewModeEnabled}\n//         onChange={() => setViewModeEnabled(!viewModeEnabled)}\n//       />\n//       View mode\n//     </label>\n//     <label>\n//       <input\n//         type=\"checkbox\"\n//         checked={zenModeEnabled}\n//         onChange={() => setZenModeEnabled(!zenModeEnabled)}\n//       />\n//       Zen mode\n//     </label>\n//     <label>\n//       <input\n//         type=\"checkbox\"\n//         checked={gridModeEnabled}\n//         onChange={() => setGridModeEnabled(!gridModeEnabled)}\n//       />\n//       Grid mode\n//     </label>\n//   </div>\n// );\n\n// const ExportButtons = () => (\n//   <div className=\"export-wrapper button-wrapper\">\n//     <button\n//       onClick={() => {\n//         const svg = exportToSvg({\n//           elements: excalidrawRef.current!.getSceneElements(),\n//           appState: {\n//             ...initialData.appState,\n//           } as any,\n//         });\n//         document.querySelector('.export-svg')!.innerHTML = svg.outerHTML;\n//       }}\n//       type=\"button\"\n//     >\n//       Export to SVG\n//     </button>\n//     <div className=\"export export-svg\" />\n//\n//     <button\n//       onClick={async () => {\n//         const blob = await exportToBlob({\n//           elements: excalidrawRef.current!.getSceneElements(),\n//           mimeType: 'image/png',\n//           appState: {\n//             ...initialData.appState,\n//           } as any,\n//         });\n//         setBlobUrl(window.URL.createObjectURL(blob));\n//       }}\n//       type=\"button\"\n//     >\n//       Export to Blob\n//     </button>\n//     <div className=\"export export-blob\">\n//       <img src={blobUrl!} alt=\"\" />\n//     </div>\n//\n//     <button\n//       onClick={() => {\n//         const canvas = exportToCanvas({\n//           elements: excalidrawRef.current!.getSceneElements(),\n//           appState: {\n//             ...initialData.appState,\n//           } as any,\n//         });\n//         setCanvasUrl(canvas.toDataURL());\n//       }}\n//       type=\"button\"\n//     >\n//       Export to Canvas\n//     </button>\n//     <div className=\"export export-canvas\">\n//       <img src={canvasUrl!} alt=\"\" />\n//     </div>\n//   </div>\n// );\n","import { getParent, insertNodes } from '@udecode/plate-common';\nimport { PlatePluginKey, SPEditor, TElement } from '@udecode/plate-core';\nimport { ELEMENT_EXCALIDRAW } from '../defaults';\nimport { ExcalidrawNodeData } from '../types';\n\nexport const insertExcalidraw = (\n  editor: SPEditor,\n  {\n    pluginKey = ELEMENT_EXCALIDRAW,\n  }: Partial<ExcalidrawNodeData> & PlatePluginKey\n): void => {\n  if (!editor.selection) return;\n\n  const selectionParentEntry = getParent(editor, editor.selection);\n  if (!selectionParentEntry) return;\n\n  const [, path] = selectionParentEntry;\n\n  insertNodes<TElement<ExcalidrawNodeData>>(\n    editor,\n    {\n      type: pluginKey,\n      children: [{ text: '' }],\n    },\n    { at: path }\n  );\n};\n"],"names":["ELEMENT_EXCALIDRAW","getExcalidrawDeserialize","pluginKey","editor","options","getPlatePluginOptions","element","getNodeDeserializer","type","getNode","rules","className","getSlateClass","deserialize","createExcalidrawPlugin","pluginKeys","renderElement","getRenderElement","voidTypes","getPlatePluginTypes","getExcalidrawElementStyles","props","createStyles","prefixClassNames","excalidrawWrapper","ExcalidrawElement","attributes","children","nodeProps","styles","_styles","classNames","scrollToContent","libraryItems","excalidrawProps","_excalidrawProps","rootProps","Excalidraw","setExcalidraw","useState","useEffect","then","comp","default","_excalidrawRef","useRef","excalidrawRef","initialData","elements","data","appState","state","autoFocus","css","insertExcalidraw","selection","selectionParentEntry","getParent","path","insertNodes","text","at"],"mappings":";;;;;;MAAaA,kBAAkB,GAAG;;MCQrBC,wBAAwB,GAAG,CACtCC,SAAS,GAAGF,kBAD0B,KAErBG,MAAD,IAAY;AAC5B,QAAMC,OAAO,GAAGC,qBAAqB,CAACF,MAAD,EAASD,SAAT,CAArC;AAEA,SAAO;AACLI,IAAAA,OAAO,EAAEC,mBAAmB,CAAC;AAC3BC,MAAAA,IAAI,EAAEJ,OAAO,CAACI,IADa;AAE3BC,MAAAA,OAAO,EAAE,MAAM;AACb;AACA;AACA;AAEA,eAAO;AACLD,UAAAA,IAAI,EAAEJ,OAAO,CAACI,IADT;;AAAA,SAAP,CALa;AAUd,OAZ0B;AAa3BE,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,SAAS,EAAEC,aAAa,CAACR,OAAO,CAACI,IAAT;AAA1B,OAAD,CAboB;AAc3B,SAAGJ,OAAO,CAACS;AAdgB,KAAD;AADvB,GAAP;AAkBD;;ACvBD;AACA;AACA;;MACaC,sBAAsB,GAAG,CAAC;AACrCZ,EAAAA,SAAS,GAAGF;AADyB,IAInC,EAJkC,MAIb;AACvBe,EAAAA,UAAU,EAAEb,SADW;AAEvBc,EAAAA,aAAa,EAAEC,gBAAgB,CAACf,SAAD,CAFR;AAGvBW,EAAAA,WAAW,EAAEZ,wBAAwB,CAACC,SAAD,CAHd;AAIvBgB,EAAAA,SAAS,EAAEC,mBAAmB,CAACjB,SAAD;AAJP,CAJa;;MCPzBkB,0BAA0B,GAAIC,KAAD,IACxCC,YAAY,CACV;AAAEC,EAAAA,gBAAgB,EAAE,mBAApB;AAAyC,KAAGF;AAA5C,CADU,EAEV;AACEG,EAAAA,iBAAiB,EAAI;AAAA;AAAA;AADvB,CAFU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCCDC,iBAAiB,GAAIJ,KAAD,IAAmC;AAAA;;AAClE,QAAM;AACJK,IAAAA,UADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,SAHI;AAIJtB,IAAAA,OAJI;AAKJuB,IAAAA,MAAM,EAAEC,OALJ;AAMJC,IAAAA,UANI;AAOJR,IAAAA,gBAPI;AAQJS,IAAAA,eAAe,GAAG,IARd;AASJC,IAAAA,YAAY,GAAG,EATX;AAUJC,IAAAA,eAAe,EAAEC,gBAVb;AAWJ,OAAGC;AAXC,MAYFf,KAZJ;AAcA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BC,QAAQ,CAAM,IAAN,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,iEAAO,6BAAP,IAAsCC,IAAtC,CAA4CC,IAAD,IACzCJ,aAAa,CAACI,IAAI,CAACC,OAAN,CADf;AAGD,GAJQ,CAAT;AAMA,QAAMd,MAAM,GAAGT,0BAA0B,CAACC,KAAD,CAAzC;;AACA,QAAMuB,cAAc,GAAGC,MAAM,CAA0B,IAA1B,CAA7B,CAvBkE;;;AA2BlE,QAAMX,eAAiC,GAAG;AACxCY,IAAAA,aAAa,EAAEF,cADyB;AAExCG,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,mBAAE1C,OAAO,CAAC2C,IAAV,kDAAE,cAAcD,QADb;AAEXE,MAAAA,QAAQ,oBAAE5C,OAAO,CAAC2C,IAAV,mDAAE,eAAcE,KAFb;AAGXnB,MAAAA,eAHW;AAIXC,MAAAA;AAJW,KAF2B;AAQxCmB,IAAAA,SAAS,EAAE,KAR6B;AASxC;AACA;AAEA;AACA;AACA;AACA;AACA,OAAGjB;AAhBqC,GAA1C;AAmBA,sBACE,wCAAST,UAAT,EAAyBU,SAAzB,gBACE;AAAK,IAAA,eAAe,EAAE;AAAtB,kBACE;AAEE,IAAA,SAAS,2BAAEP,MAAM,CAACL,iBAAT,0DAAE,sBAA0Bb,SAFvC;AAAA,qCACOkB,MAAM,CAACL,iBADd,2DACO,uBAA0B6B;AADjC,KAIGhB,UAAU,iBACT,oBAAC,UAAD,eAAgBT,SAAhB,EAAgCM,eAAhC,EALJ,CADF,CADF,EAWGP,QAXH,CADF;AAeD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;MChKa2B,gBAAgB,GAAG,CAC9BnD,MAD8B,EAE9B;AACED,EAAAA,SAAS,GAAGF;AADd,CAF8B,KAKrB;AACT,MAAI,CAACG,MAAM,CAACoD,SAAZ,EAAuB;AAEvB,QAAMC,oBAAoB,GAAGC,SAAS,CAACtD,MAAD,EAASA,MAAM,CAACoD,SAAhB,CAAtC;AACA,MAAI,CAACC,oBAAL,EAA2B;AAE3B,QAAM,GAAGE,IAAH,IAAWF,oBAAjB;AAEAG,EAAAA,WAAW,CACTxD,MADS,EAET;AACEK,IAAAA,IAAI,EAAEN,SADR;AAEEyB,IAAAA,QAAQ,EAAE,CAAC;AAAEiC,MAAAA,IAAI,EAAE;AAAR,KAAD;AAFZ,GAFS,EAMT;AAAEC,IAAAA,EAAE,EAAEH;AAAN,GANS,CAAX;AAQD;;;;"}