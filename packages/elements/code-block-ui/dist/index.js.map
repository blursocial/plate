{"version":3,"file":"index.js","sources":["../src/CodeBlockElement/CodeBlockElement.styles.ts","../src/CodeBlockElement/CodeBlockSelectElement.tsx","../src/CodeBlockElement/CodeBlockElement.tsx","../src/CodeBlockElement/CodeLineElement.styles.ts","../src/CodeBlockElement/CodeLineElement.tsx","../src/ToolbarCodeBlock/ToolbarCodeBlock.tsx"],"sourcesContent":["import {\n  createStyles,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { css } from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const getCodeBlockElementStyles = (props: StyledElementProps) =>\n  createStyles(\n    { prefixClassNames: 'CodeBlockElement', ...props },\n    {\n      root: [\n        tw`whitespace-pre-wrap py-3 px-4`,\n        css`\n          font-size: 16px;\n          font-family: SFMono-Regular, Consolas, Monaco, 'Liberation Mono',\n            Menlo, Courier, monospace;\n          tab-size: 2;\n          line-height: normal;\n          border-radius: 3px;\n          background-color: rgb(247, 246, 243);\n        `,\n      ],\n    }\n  );\n","import React from 'react';\nimport {\n  CODE_BLOCK_LANGUAGES,\n  CODE_BLOCK_LANGUAGES_POPULAR,\n  getCodeBlockPluginOptions,\n} from '@udecode/plate-code-block';\nimport { useEditorRef } from '@udecode/plate-core';\nimport { CSSProp } from 'styled-components';\n\nexport const CodeBlockSelectElement = ({\n  lang,\n  onChange,\n  ...props\n}: {\n  lang?: string;\n  onChange: Function;\n  className?: string;\n  css?: CSSProp;\n}) => {\n  const [value, setValue] = React.useState(lang);\n  const editor = useEditorRef();\n  const code_block = getCodeBlockPluginOptions(editor);\n  return (\n    <select\n      value={value}\n      style={{ float: 'right' }}\n      onClick={(e) => {\n        e.stopPropagation();\n      }}\n      onChange={(e) => {\n        onChange(e.target.value);\n        setValue(e.target.value);\n      }}\n      contentEditable={false}\n      {...props}\n    >\n      <option value=\"\">Plain text</option>\n      {code_block?.syntaxPopularFirst &&\n        Object.entries(CODE_BLOCK_LANGUAGES_POPULAR).map(([key, val]) => (\n          <option key={key} value={key}>\n            {val}\n          </option>\n        ))}\n      {Object.entries(CODE_BLOCK_LANGUAGES).map(([key, val]) => (\n        <option key={key} value={key}>\n          {val}\n        </option>\n      ))}\n    </select>\n  );\n};\n","import React from 'react';\nimport {\n  CodeBlockNodeData,\n  getCodeBlockPluginOptions,\n} from '@udecode/plate-code-block';\nimport { setNodes } from '@udecode/plate-common';\nimport { TElement, useEditorRef } from '@udecode/plate-core';\nimport { StyledElementProps } from '@udecode/plate-styled-components';\nimport { ReactEditor } from 'slate-react';\nimport { getCodeBlockElementStyles } from './CodeBlockElement.styles';\nimport { CodeBlockSelectElement } from './CodeBlockSelectElement';\n\nexport const CodeBlockElement = (props: StyledElementProps) => {\n  const {\n    attributes,\n    children,\n    nodeProps,\n    styles,\n    element,\n    classNames,\n    prefixClassNames,\n    ...rootProps\n  } = props;\n\n  const { lang } = element;\n  const editor = useEditorRef();\n  const { root } = getCodeBlockElementStyles(props);\n  const code_block = getCodeBlockPluginOptions(editor);\n  const codeClassName = lang ? `${lang} language-${lang}` : '';\n\n  return (\n    <>\n      <pre\n        {...attributes}\n        css={root.css}\n        className={root.className}\n        {...rootProps}\n        {...nodeProps}\n      >\n        {code_block?.syntax && (\n          <CodeBlockSelectElement\n            data-testid=\"CodeBlockSelectElement\"\n            lang={lang}\n            onChange={(val: string) => {\n              const path = ReactEditor.findPath(editor, element);\n              setNodes<TElement<CodeBlockNodeData>>(\n                editor,\n                { lang: val },\n                { at: path }\n              );\n            }}\n          />\n        )}\n        <code className={codeClassName}>{children}</code>\n      </pre>\n    </>\n  );\n};\n","import {\n  createStyles,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\n\nexport const getCodeLineElementStyles = (props: StyledElementProps) =>\n  createStyles(\n    { prefixClassNames: 'CodeLineElement', ...props },\n    {\n      root: [{}],\n    }\n  );\n","import React from 'react';\nimport { StyledElementProps } from '@udecode/plate-styled-components';\nimport { getCodeLineElementStyles } from './CodeLineElement.styles';\n\nexport const CodeLineElement = (props: StyledElementProps) => {\n  const {\n    attributes,\n    children,\n    nodeProps,\n    styles,\n    element,\n    classNames,\n    prefixClassNames,\n    ...rootProps\n  } = props;\n\n  const { root } = getCodeLineElementStyles(props);\n\n  return (\n    <div\n      {...attributes}\n      css={root.css}\n      className={root.className}\n      {...rootProps}\n      {...nodeProps}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  CodeBlockInsertOptions,\n  getCodeBlockType,\n  insertEmptyCodeBlock,\n} from '@udecode/plate-code-block';\nimport { getPreventDefaultHandler } from '@udecode/plate-common';\nimport { useEventEditorId, useStoreEditorState } from '@udecode/plate-core';\nimport { ToolbarButtonProps, ToolbarElement } from '@udecode/plate-toolbar';\n\nexport const ToolbarCodeBlock = ({\n  options,\n  ...props\n}: ToolbarButtonProps & {\n  options?: CodeBlockInsertOptions;\n}) => {\n  const editor = useStoreEditorState(useEventEditorId('focus'));\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <ToolbarElement\n      type={getCodeBlockType(editor)}\n      onMouseDown={getPreventDefaultHandler(insertEmptyCodeBlock, editor, {\n        insertNodesOptions: { select: true },\n        ...options,\n      })}\n      {...props}\n    />\n  );\n};\n"],"names":["getCodeBlockElementStyles","props","createStyles","prefixClassNames","root","css","CodeBlockSelectElement","lang","onChange","value","setValue","React","useState","editor","useEditorRef","code_block","getCodeBlockPluginOptions","float","e","stopPropagation","target","syntaxPopularFirst","Object","entries","CODE_BLOCK_LANGUAGES_POPULAR","map","key","val","CODE_BLOCK_LANGUAGES","CodeBlockElement","attributes","children","nodeProps","styles","element","classNames","rootProps","codeClassName","className","syntax","path","ReactEditor","findPath","setNodes","at","getCodeLineElementStyles","CodeLineElement","ToolbarCodeBlock","options","useStoreEditorState","useEventEditorId","ToolbarElement","getCodeBlockType","getPreventDefaultHandler","insertEmptyCodeBlock","insertNodesOptions","select"],"mappings":"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"}